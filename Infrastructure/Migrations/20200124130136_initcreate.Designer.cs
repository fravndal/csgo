// <auto-generated />
using Infrastructure.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20200124130136_initcreate")]
    partial class initcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmmoReserve")
                        .HasColumnType("int");

                    b.Property<double>("ArmorPenetration")
                        .HasColumnType("float");

                    b.Property<int>("BulletRange")
                        .HasColumnType("int");

                    b.Property<int>("Bullets")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("DamageFalloff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FireRate")
                        .HasColumnType("float");

                    b.Property<string>("HoldToShoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KillAward")
                        .HasColumnType("int");

                    b.Property<int>("MagazineSize")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<string>("PenetrationPower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TaggingPower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tracers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeaponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeaponType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Core.Entities.WeaponImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId")
                        .IsUnique();

                    b.ToTable("WeaponsImage");
                });

            modelBuilder.Entity("Core.Entities.WeaponImage", b =>
                {
                    b.HasOne("Core.Entities.Weapon", "Weapon")
                        .WithOne("WeaponImage")
                        .HasForeignKey("Core.Entities.WeaponImage", "WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
